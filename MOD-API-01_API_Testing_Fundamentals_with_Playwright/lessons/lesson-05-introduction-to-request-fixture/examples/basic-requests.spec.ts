/**
 * @fileoverview This file contains examples of basic API requests using Playwright's `request` fixture.
 * These examples are meant to be clear, simple, and easy to understand for beginners.
 */

import { test, expect } from '@playwright/test';

// We are using a public API (https://reqres.in/) for these examples.
// It's a great resource for practicing API testing.
const baseURL = 'https://reqres.in';

/**
 * Test suite for GET requests.
 * A test suite is a way to group related tests together.
 */
test.describe('GET Requests - Examples', () => {
  /**
   * This test demonstrates how to fetch a single resource and validate its response.
   */
  test('should get a single user', async ({ request }) => {
    // Make a GET request to a specific endpoint.
    // We are requesting the user with ID 2.
    const response = await request.get(`${baseURL}/api/users/2`);

    // First, always check the status code to ensure the request was successful.
    expect(response.status()).toBe(200);

    // Parse the JSON body of the response.
    const body = await response.json();

    // Assert that the data in the response body is correct.
    // This confirms the API is returning the right information.
    expect(body.data.id).toBe(2);
    expect(body.data.email).toBe('janet.weaver@reqres.in');
    expect(body.data.first_name).toBe('Janet');
  });

  /**
   * This test shows how to fetch a collection of resources (a list) and validate it.
   */
  test('should get a list of users', async ({ request }) => {
    // Make a GET request to an endpoint that returns a list.
    const response = await request.get(`${baseURL}/api/users?page=2`);

    // Check for a successful status code.
    expect(response.status()).toBe(200);

    // Parse the response.
    const body = await response.json();

    // When expecting a list, it's good practice to check that the list (array) is not empty.
    expect(body.data.length).toBeGreaterThan(0);

    // We can also check metadata about the list.
    expect(body.page).toBe(2);
    expect(body.total).toBe(12);
  });
});

/**
 * Test suite for POST requests.
 */
test.describe('POST Requests - Examples', () => {
  /**
   * This test demonstrates how to create a new resource using a POST request.
   */
  test('should create a new user', async ({ request }) => {
    // Define the data (payload) you want to send to the API.
    const newUser = {
      name: 'morpheus',
      job: 'leader',
    };

    // Make the POST request. The `data` option is used to send the request body.
    const response = await request.post(`${baseURL}/api/users`, {
      data: newUser,
    });

    // For resource creation, the expected status code is typically 201 (Created).
    expect(response.status()).toBe(201);

    // Parse the response body.
    const body = await response.json();

    // Validate that the API response includes the data we sent.
    expect(body.name).toBe(newUser.name);
    expect(body.job).toBe(newUser.job);

    // It's also important to check for data generated by the server, like an ID or a timestamp.
    // This confirms the resource was actually created in the system.
    expect(body).toHaveProperty('id');
    expect(typeof body.id).toBe('string'); // The API returns the ID as a string
    expect(body).toHaveProperty('createdAt');
    expect(typeof body.createdAt).toBe('string');
  });
});