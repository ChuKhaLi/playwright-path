# Advanced Playwright GitHub Actions Workflow with Matrix Testing
# File: .github/workflows/playwright-matrix.yml
# Description: Comprehensive workflow demonstrating matrix testing, sharding, and advanced configurations

name: Playwright Matrix Tests

on:
  push:
    branches: [ main, develop, 'feature/**' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC for regression testing
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target Environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
          - development
      test_suite:
        description: 'Test Suite to Run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - smoke
          - regression
          - api
          - e2e
      browser_override:
        description: 'Override Browser Selection (optional)'
        required: false
        type: string

env:
  # Global environment variables
  FORCE_COLOR: 1
  CI: true

jobs:
  # Job 1: Pre-flight checks
  pre_flight:
    name: Pre-flight Checks
    runs-on: ubuntu-latest
    outputs:
      should_run_tests: ${{ steps.check.outputs.run_tests }}
      test_matrix: ${{ steps.matrix.outputs.matrix }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Check if tests should run
        id: check
        run: |
          if [[ "${{ github.event_name }}" == "schedule" ]] || [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "run_tests=true" >> $GITHUB_OUTPUT
          elif git diff --name-only HEAD~1 | grep -E "(tests/|src/|playwright\.config|package\.json|\.github/workflows/)"; then
            echo "run_tests=true" >> $GITHUB_OUTPUT
          else
            echo "run_tests=false" >> $GITHUB_OUTPUT
            echo "No relevant files changed, skipping tests"
          fi
      
      - name: Generate test matrix
        id: matrix
        run: |
          # Default matrix
          MATRIX='{"os":["ubuntu-latest","windows-latest","macos-latest"],"browser":["chromium","firefox","webkit"],"node":["18","20"]}'
          
          # Override for specific branches or conditions
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            # Full matrix for main branch
            echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # Reduced matrix for PRs
            MATRIX='{"os":["ubuntu-latest"],"browser":["chromium","firefox"],"node":["18"]}'
            echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
          else
            echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
          fi

  # Job 2: Matrix testing with sharding
  test_matrix:
    name: Test (${{ matrix.os }}, ${{ matrix.browser }}, Node ${{ matrix.node }}, Shard ${{ matrix.shard }})
    runs-on: ${{ matrix.os }}
    needs: pre_flight
    if: needs.pre_flight.outputs.should_run_tests == 'true'
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        browser: [chromium, firefox, webkit]
        node: [18, 20]
        shard: [1, 2, 3, 4]
        exclude:
          # WebKit not available on Windows
          - os: windows-latest
            browser: webkit
          # Reduce combinations for efficiency
          - os: windows-latest
            node: 20
            shard: 4
    
    timeout-minutes: 45
    
    env:
      # Matrix-specific environment variables
      BROWSER: ${{ matrix.browser }}
      NODE_VERSION: ${{ matrix.node }}
      SHARD: ${{ matrix.shard }}
      TOTAL_SHARDS: 4
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'
          cache-dependency-path: package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      # Cache Playwright browsers by OS and browser
      - name: Get Playwright version
        id: playwright-version
        shell: bash
        run: |
          VERSION=$(npm list @playwright/test --depth=0 --json | jq -r '.dependencies."@playwright/test".version')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Cache Playwright browsers
        uses: actions/cache@v3
        id: playwright-cache
        with:
          path: |
            ~/.cache/ms-playwright
            ~/Library/Caches/ms-playwright
            %USERPROFILE%\AppData\Local\ms-playwright
          key: playwright-${{ runner.os }}-${{ matrix.browser }}-${{ steps.playwright-version.outputs.version }}
          restore-keys: |
            playwright-${{ runner.os }}-${{ matrix.browser }}-
            playwright-${{ runner.os }}-
      
      - name: Install Playwright browser
        run: npx playwright install ${{ matrix.browser }} --with-deps
      
      # Handle different test suites based on input
      - name: Determine test command
        id: test-cmd
        shell: bash
        run: |
          SUITE="${{ github.event.inputs.test_suite || 'all' }}"
          BROWSER_OVERRIDE="${{ github.event.inputs.browser_override }}"
          
          if [[ -n "$BROWSER_OVERRIDE" ]]; then
            BROWSER="$BROWSER_OVERRIDE"
          else
            BROWSER="${{ matrix.browser }}"
          fi
          
          case "$SUITE" in
            "smoke")
              CMD="npx playwright test --grep @smoke --project=$BROWSER --shard=${{ matrix.shard }}/${{ env.TOTAL_SHARDS }}"
              ;;
            "regression")
              CMD="npx playwright test --grep @regression --project=$BROWSER --shard=${{ matrix.shard }}/${{ env.TOTAL_SHARDS }}"
              ;;
            "api")
              CMD="npx playwright test tests/api --project=$BROWSER --shard=${{ matrix.shard }}/${{ env.TOTAL_SHARDS }}"
              ;;
            "e2e")
              CMD="npx playwright test tests/e2e --project=$BROWSER --shard=${{ matrix.shard }}/${{ env.TOTAL_SHARDS }}"
              ;;
            *)
              CMD="npx playwright test --project=$BROWSER --shard=${{ matrix.shard }}/${{ env.TOTAL_SHARDS }}"
              ;;
          esac
          
          echo "command=$CMD" >> $GITHUB_OUTPUT
      
      - name: Run Playwright tests
        run: ${{ steps.test-cmd.outputs.command }}
        env:
          # Environment-specific URLs
          BASE_URL: ${{ 
            github.event.inputs.environment == 'production' && 'https://production.example.com' ||
            github.event.inputs.environment == 'development' && 'https://dev.example.com' ||
            'https://staging.example.com'
          }}
          TEST_ENV: ${{ github.event.inputs.environment || 'staging' }}
          # Performance monitoring
          PWTEST_HTML_REPORT_OPEN: never
          PWTEST_SKIP_TEST_OUTPUT: true
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.browser }}-node${{ matrix.node }}-shard${{ matrix.shard }}
          path: |
            playwright-report/
            test-results/
          retention-days: 14
      
      - name: Upload HTML report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: html-report-${{ matrix.os }}-${{ matrix.browser }}-node${{ matrix.node }}-shard${{ matrix.shard }}
          path: playwright-report/
          retention-days: 14

  # Job 3: Merge reports from all shards
  merge_reports:
    name: Merge Test Reports
    runs-on: ubuntu-latest
    needs: test_matrix
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Merge HTML reports
        run: |
          # Create merged report directory
          mkdir -p merged-report
          
          # Copy all HTML reports to a single location
          find artifacts -name "*.html" -exec cp {} merged-report/ \; || true
          find artifacts -name "*.json" -exec cp {} merged-report/ \; || true
          
          # Generate consolidated report
          npx playwright merge-reports --reporter=html artifacts/*/test-results
        continue-on-error: true
      
      - name: Upload merged report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: merged-playwright-report
          path: |
            playwright-report/
            merged-report/
          retention-days: 30

  # Job 4: Notify on completion
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test_matrix, merge_reports]
    if: always()
    
    steps:
      - name: Evaluate test results
        id: results
        run: |
          if [[ "${{ needs.test_matrix.result }}" == "success" ]]; then
            echo "status=✅ Passed" >> $GITHUB_OUTPUT
            echo "color=good" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.test_matrix.result }}" == "failure" ]]; then
            echo "status=❌ Failed" >> $GITHUB_OUTPUT
            echo "color=danger" >> $GITHUB_OUTPUT
          else
            echo "status=⚠️ Cancelled/Skipped" >> $GITHUB_OUTPUT
            echo "color=warning" >> $GITHUB_OUTPUT
          fi
      
      - name: Create summary
        run: |
          echo "## 🎭 Playwright Matrix Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: ${{ steps.results.outputs.status }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: ${{ github.event.inputs.environment || 'staging' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Test Suite**: ${{ github.event.inputs.test_suite || 'all' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Browsers**: ${{ github.event.inputs.browser_override || 'chromium, firefox, webkit' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 [Download detailed reports from artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY